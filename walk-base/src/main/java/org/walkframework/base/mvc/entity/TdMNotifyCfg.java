package org.walkframework.base.mvc.entity;import org.walkframework.data.entity.BaseEntity;import org.walkframework.data.entity.OperColumn;import org.walkframework.data.annotation.Table;import org.walkframework.data.annotation.Column;  /*** @Type TdMNotifyCfg* @Desc  通知配置表* @author shf675* @date 2017-11-04 12:45:55* * 1、本类由工具类DbToBeanUtil自动生成* 2、数据表新增字段时建议使用DbToBeanUtil工具类重新生成* 3、不建议直接修改本类，如果想对本类扩展，建议创建子类，在子类里进行扩展*/	@Table(name="TD_M_NOTIFY_CFG")public class TdMNotifyCfg extends BaseEntity {	private static final long serialVersionUID = 1L;	 /**		 *业务平台编码		 */		@Column(name = SERVICE_ID)	private String serviceId;	 /**		 *业务平台名称		 */		@Column(name = SERVICE_NAME)	private String serviceName;	 /**		 *通知模式。01：消息(mq)；02：URL通知(业务平台提供通知URL)；03：人工通知		 */		@Column(name = NOTIFY_MODE)	private String notifyMode;	 /**		 *通知地址。当通知模式为消息时该字段为消息频道编码；当通知模式为URL通知时该字段为业务平台提供的通知URL；		 */		@Column(name = NOTIFY_ADDR)	private String notifyAddr;	 /**		 *反馈类型。0：不等待反馈；1：等待反馈；当为等待时，接收方收到通知后需在通知url中反馈处理结果		 */		@Column(name = RSP_TYPE)	private String rspType;	 /**		 *超时毫秒数。默认30秒。30000		 */		@Column(name = TIMEOUT_MILLIS)	private Long timeoutMillis;	 /**		 *重试最大限制次数。默认6次		 */		@Column(name = RETRY_LIMIT_NUMS)	private Integer retryLimitNums;	 /**		 *通知对象自定义处理类。类必须实现ObjectHandleNotify接口		 */		@Column(name = OBJECT_HANDLE_CLASS)	private String objectHandleClass;	 /**		 *有效标识。1有效。0无效。		 */		@Column(name = VALID_FLAG)	private String validFlag;	 /**		 *备注		 */		@Column(name = REMARK)	private String remark;	 /**		 *备用字段1		 */		@Column(name = RSVALUE1)	private String rsvalue1;	 /**		 *备用字段2		 */		@Column(name = RSVALUE2)	private String rsvalue2;	 /**		 *备用字段3		 */		@Column(name = RSVALUE3)	private String rsvalue3;	 /**		 *URL通知自定义处理类		 */		@Column(name = URL_HANDLE_CLASS)	private String urlHandleClass;	public String getServiceId() {		return serviceId;	}	public OperColumn setServiceId(String serviceId) {		this.serviceId = serviceId;		return addOperColumn(SERVICE_ID, "serviceId", serviceId, String.class);	}	public String getServiceName() {		return serviceName;	}	public OperColumn setServiceName(String serviceName) {		this.serviceName = serviceName;		return addOperColumn(SERVICE_NAME, "serviceName", serviceName, String.class);	}	public String getNotifyMode() {		return notifyMode;	}	public OperColumn setNotifyMode(String notifyMode) {		this.notifyMode = notifyMode;		return addOperColumn(NOTIFY_MODE, "notifyMode", notifyMode, String.class);	}	public String getNotifyAddr() {		return notifyAddr;	}	public OperColumn setNotifyAddr(String notifyAddr) {		this.notifyAddr = notifyAddr;		return addOperColumn(NOTIFY_ADDR, "notifyAddr", notifyAddr, String.class);	}	public String getRspType() {		return rspType;	}	public OperColumn setRspType(String rspType) {		this.rspType = rspType;		return addOperColumn(RSP_TYPE, "rspType", rspType, String.class);	}	public Long getTimeoutMillis() {		return timeoutMillis;	}	public OperColumn setTimeoutMillis(Long timeoutMillis) {		this.timeoutMillis = timeoutMillis;		return addOperColumn(TIMEOUT_MILLIS, "timeoutMillis", timeoutMillis, Long.class);	}	public Integer getRetryLimitNums() {		return retryLimitNums;	}	public OperColumn setRetryLimitNums(Integer retryLimitNums) {		this.retryLimitNums = retryLimitNums;		return addOperColumn(RETRY_LIMIT_NUMS, "retryLimitNums", retryLimitNums, Integer.class);	}	public String getObjectHandleClass() {		return objectHandleClass;	}	public OperColumn setObjectHandleClass(String objectHandleClass) {		this.objectHandleClass = objectHandleClass;		return addOperColumn(OBJECT_HANDLE_CLASS, "objectHandleClass", objectHandleClass, String.class);	}	public String getValidFlag() {		return validFlag;	}	public OperColumn setValidFlag(String validFlag) {		this.validFlag = validFlag;		return addOperColumn(VALID_FLAG, "validFlag", validFlag, String.class);	}	public String getRemark() {		return remark;	}	public OperColumn setRemark(String remark) {		this.remark = remark;		return addOperColumn(REMARK, "remark", remark, String.class);	}	public String getRsvalue1() {		return rsvalue1;	}	public OperColumn setRsvalue1(String rsvalue1) {		this.rsvalue1 = rsvalue1;		return addOperColumn(RSVALUE1, "rsvalue1", rsvalue1, String.class);	}	public String getRsvalue2() {		return rsvalue2;	}	public OperColumn setRsvalue2(String rsvalue2) {		this.rsvalue2 = rsvalue2;		return addOperColumn(RSVALUE2, "rsvalue2", rsvalue2, String.class);	}	public String getRsvalue3() {		return rsvalue3;	}	public OperColumn setRsvalue3(String rsvalue3) {		this.rsvalue3 = rsvalue3;		return addOperColumn(RSVALUE3, "rsvalue3", rsvalue3, String.class);	}	public String getUrlHandleClass() {		return urlHandleClass;	}	public OperColumn setUrlHandleClass(String urlHandleClass) {		this.urlHandleClass = urlHandleClass;		return addOperColumn(URL_HANDLE_CLASS, "urlHandleClass", urlHandleClass, String.class);	}	//Database field	public static final String SERVICE_ID = "SERVICE_ID";	public static final String SERVICE_NAME = "SERVICE_NAME";	public static final String NOTIFY_MODE = "NOTIFY_MODE";	public static final String NOTIFY_ADDR = "NOTIFY_ADDR";	public static final String RSP_TYPE = "RSP_TYPE";	public static final String TIMEOUT_MILLIS = "TIMEOUT_MILLIS";	public static final String RETRY_LIMIT_NUMS = "RETRY_LIMIT_NUMS";	public static final String OBJECT_HANDLE_CLASS = "OBJECT_HANDLE_CLASS";	public static final String VALID_FLAG = "VALID_FLAG";	public static final String REMARK = "REMARK";	public static final String RSVALUE1 = "RSVALUE1";	public static final String RSVALUE2 = "RSVALUE2";	public static final String RSVALUE3 = "RSVALUE3";	public static final String URL_HANDLE_CLASS = "URL_HANDLE_CLASS";	}